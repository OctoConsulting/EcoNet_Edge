version: '3.3'
services:

#   __  __           _         
#  |  \/  |   __ _  (_)  _ __  
#  | |\/| |  / _` | | | | '_ \ 
#  | |  | | | (_| | | | | | | |
#  |_|  |_|  \__,_| |_| |_| |_|
# (runs everything)

  main:
    build:
      context: ./Main # this is the absolute path to the app directory
      dockerfile: Dockerfile # this is the name of the Dockerfile in the app directory
      
    image: mainimg # this is the name of the image that will be used by the app service
    networks:
      - appnet # connect to appnet network
    depends_on:
      - api
      - totocv
      - noise
      - shot_detect
      - model
    devices:
      - /dev/bus/usb:/dev/bus/usb
    container_name: main
    ports:
      - "5000:5000"
    expose:
      - "5000"
#    volumes:
#      - type: bind
#        source: ./logs
#        target: /var/logs

#      _      ____    ___ 
#     / \    |  _ \  |_ _|
#    / _ \   | |_) |  | | 
#   / ___ \  |  __/   | | 
#  /_/   \_\ |_|     |___|
# (microphone connection)

  api:
    build:
      context: ./API # this is the absolute path to the app directory
      dockerfile: Dockerfile # this is the name of the Dockerfile in the app directory

    image: imgapi # this is the name of the image that will be used by the app service
    networks:
      - appnet # connect to appnet network
    container_name: api
    ports:
      - "8000:5000"
    expose:
      - "5000"

    devices:
    - /dev/snd:/dev/snd
    privileged: true

#   _____           _              ____  __     __
#  |_   _|   ___   | |_    ___    / ___| \ \   / /
#    | |    / _ \  | __|  / _ \  | |      \ \ / / 
#    | |   | (_) | | |_  | (_) | | |___    \ V /  
#    |_|    \___/   \__|  \___/   \____|    \_/   
# (computer vision model)

  totocv:
    build:
      context: ./TotoCV # this is the absolute path to the app directory
      dockerfile: Dockerfile # this is the name of the Dockerfile in the app directory

    image: totocv-img #the name of the image that will be used by the app service
    networks:
      - appnet # connect to appnet network
    container_name: toto
    ports:
      - "8001:5000"
    expose:
      - "5000"

#   _   _           _              
#  | \ | |   ___   (_)  ___    ___ 
#  |  \| |  / _ \  | | / __|  / _ \
#  | |\  | | (_) | | | \__ \ |  __/
#  |_| \_|  \___/  |_| |___/  \___|
#  (preprocessing)

  noise:
    build:
      context: ./Edge_Noise # this is the absolute path to the app directory
      dockerfile: Dockerfile # this is the name of the Dockerfile in the app directory

    image: noise-img # this is the name of the image that will be used by the app service
    networks:
      - appnet # connect to appnet network
    container_name: noise
    ports:
      - "8002:5000"
    expose:
      - "5000"

#   ____           _                   _                  
#  |  _ \    ___  | |_    ___    ___  | |_    ___    _ __ 
#  | | | |  / _ \ | __|  / _ \  / __| | __|  / _ \  | '__|
#  | |_| | |  __/ | |_  |  __/ | (__  | |_  | (_) | | |   
#  |____/   \___|  \__|  \___|  \___|  \__|  \___/  |_|   
# (shot detection model)

  shot_detect:
    build:
      context: ./Edge_Detector # this is the absolute path to the app directory
      dockerfile: Dockerfile # this is the name of the Dockerfile in the app directory

    image: shot_detect-img # this is the name of the image that will be used by the app service
    networks:
      - appnet # connect to appnet network
    container_name: shot_detect
    ports:
      - "8003:5000"
    expose:
      - "5000"
    devices:
      - /dev/snd:/dev/snd

#      _                                   _     _        
#     / \      ___    ___    _   _   ___  | |_  (_)   ___ 
#    / _ \    / __|  / _ \  | | | | / __| | __| | |  / __|
#   / ___ \  | (__  | (_) | | |_| | \__ \ | |_  | | | (__ 
#  /_/   \_\  \___|  \___/   \__,_| |___/  \__| |_|  \___|
# (acoustic model, generate relative coordinates)

  model:
    build:
      context: ./Edge_Model # this is the absolute path to the app directory
      dockerfile: Dockerfile # this is the name of the Dockerfile in the app directory

    image: model-img # this is the name of the image that will be used by the app service
    networks:
      - appnet # connect to appnet network
    container_name: model
    ports:
      - "8004:5000"
    expose:
      - "5000"

#   _____   _   _           _       _   
#  |  ___| | | (_)   __ _  | |__   | |_ 
#  | |_    | | | |  / _` | | '_ \  | __|
#  |  _|   | | | | | (_| | | | | | | |_ 
#  |_|     |_| |_|  \__, | |_| |_|  \__|
# (flight control)  |___/               

  prot:
    build:
      context: ./Edge_DroneProto # this is the absolute path to the app directory
      dockerfile: Dockerfile # this is the name of the Dockerfile in the app directory

    image: proto-img # this is the name of the image that will be used by the app service
    networks:
      - appnet # connect to appnet network
    container_name: proto1
    ports:
      - "8005:5000"
    expose:
      - "5000"
#   _   _                                       
#  | | | |   __ _   _ __     __ _    ___   _ __ 
#  | |_| |  / _` | | '_ \   / _` |  / _ \ | '__|
#  |  _  | | (_| | | | | | | (_| | |  __/ | |   
#  |_| |_|  \__,_| |_| |_|  \__, |  \___| |_|   
# (drone management)        |___/ 

  manger:
    build:
      context: ./Edge_Managment # the absolute path to the app directory
      dockerfile: Dockerfile # the name of the Dockerfile in the app directory

    image: manner-img # the name of the image to be used by the app service
    networks:
      - appnet # connect to appnet network
    container_name: Manager
    ports:
      - "8006:5000"
    expose:
      - "5000"
    depends_on:
      - prot

#   ____            _             _                          
#  |  _ \    __ _  | |_    __ _  | |__     __ _   ___    ___ 
#  | | | |  / _` | | __|  / _` | | '_ \   / _` | / __|  / _ \
#  | |_| | | (_| | | |_  | (_| | | |_) | | (_| | \__ \ |  __/
#  |____/   \__,_|  \__|  \__,_| |_.__/   \__,_| |___/  \___|
# (database for surge and logging)

  db:
    hostname: db
    container_name: db
    build:
      context: ./Edge_DB
      dockerfile: DockerfileDatabase
    expose:
    - "5432"
    networks:
    - appnet # connect to appnet network
  db_courier:
    hostname: db_courier
    container_name: db_courier
    build:
      context: ./Edge_DB
      dockerfile: DockerfileCourier
    expose:
     - "5000"
     - "80"
    networks:
     - appnet # connect to appnet network

#  __     __  _       _                
#  \ \   / / (_)   __| |   ___    ___  
#   \ \ / /  | |  / _` |  / _ \  / _ \ 
#    \ V /   | | | (_| | |  __/ | (_) |
#     \_/    |_|  \__,_|  \___|  \___/ 
# (drone live feed)

  feed1:
    hostname: video
    container_name: video
    build:
      context: ./Edge_Video
      dockerfile: DockerfileHTML
    expose: # will be published w/ reverse proxy
     - "80"
    networks:
     - appnet # connect to appnet network
    volumes:
    - type: volume
      source: feed1
      target: /usr/share/nginx/html/feed1
  encode:
    hostname: encode
    container_name: encode
    build:
      context: ./Edge_Video
      dockerfile: DockerfileHLS
    expose: # will be published w/ reverse proxy
     - "5000"
    networks:
     - appnet # connect to appnet network
    volumes:
    - type: volume
      source: feed1
      target: /srv/feed1
    - type: volume
      source: feed2
      target: /srv/feed2
    - type: volume
      source: feed3
      target: /srv/feed3
  
#   ____                                
#  |  _ \   _ __    ___   __  __  _   _ 
#  | |_) | | '__|  / _ \  \ \/ / | | | |
#  |  __/  | |    | (_) |  >  <  | |_| |
#  |_|     |_|     \___/  /_/\_\  \__, |
# (reverse proxy, forward facing) |___/ 
  reverse_proxy:
    hostname: reverse_proxy
    container_name: reverse_proxy
    build:
      context: ./Edge_RP
      dockerfile: DockerfileRP
    expose:
     - "80"
    ports:
     - "80:80" # the only forward facing port
    networks:
     - appnet # connect to appnet network

volumes:
  feed1: # for drone video
  feed2: # for drone video
  feed3: # for drone video

networks:
  appnet: # define appnet network
    driver: bridge # so the containers can see each other
